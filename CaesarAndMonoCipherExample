# the alphabet with all symbols in the set can be encrypted
LETTERS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' 


def caesar_cipher(message, mode, key):
    # stores the encrypted/decrypted form of the message
    ciphertext = ''

    # run the encryption/decryption code on each symbol in the message string
    for symbol in message:
        if symbol in LETTERS:
            # get the encrypted (or decrypted) index of this symbol in the LETTERS
            num = LETTERS.find(symbol) # index of the uncoded symbol in LETTERS
            print (num)
        
            if mode == 'encrypt':
                num = num + key
            elif mode == 'decrypt':
                num = num - key
            else:
                print('Correct operation mode is needed')
                exit()
            
            # handle the wrap-around if num is larger than the length of LETTERS or less than 0
            num = num % len(LETTERS)

            # add encrypted/decrypted number's symbol at the end of translated
            ciphertext = ciphertext + LETTERS[num]

        else:
            # just add the symbol without encrypting/decrypting if it is not in the set LETTERS
            ciphertext= ciphertext + symbol

    # print the encrypted/decrypted string to the screen
    return ciphertext


def monoalphabetic_cipher(message, mode, key):
    ciphertext = ''

    for symbol in message:
        if symbol in LETTERS:

            num = LETTERS.find(symbol)

            if mode == 'encrypt':
                num2 = key[num]
                ciphertext = ciphertext + num2
            elif mode == 'decrypt':
                num = key.find(symbol)
                num2 = LETTERS[num]
                ciphertext = ciphertext + num2
            else:
                print('Correct operation mode is needed')
                exit()

            # add encrypted/decrypted number's symbol at the end of translated
            #ciphertext = ciphertext + LETTERS[num]

        else:
            # just add the symbol without encrypting/decrypting if it is not in the set LETTERS
            ciphertext = ciphertext + symbol

    # print the encrypted/decrypted string to the screen
    return ciphertext


if __name__ == '__main__':

    # Determine the number of arguements in the command line
    numArgv = len(sys.argv) 

    # the default string to be encrypted/decrypted
    message = 'a secret message.'

    # the default key used by the caesar cipher
    # key = 3
    ##  Note that for the monoalphebatic cipher you should use the following default key
    ##  by uncommenting the following statement
    
    key = 'jklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghi'
    # convert key into list
    #randomKey = list(key)
    # shuffle list to be random key
    #random.shuffle(randomKey)
    # append result
    #result  = ''.join(randomKey)
    # print (result)
        
    if numArgv == 2:
        # get the message from the input given in the command line
        message = sys.argv[1]
    elif numArgv == 3:
        # get the message and key specified the input given in the command line
        message = sys.argv[1]
        key = int(sys.argv[2])

    elif numArgv > 3:
        # Instruction on providing message and key from command line
        print('+++Please input the expected message and key with correct format')
        print('+++python caesar_cipher.py my_message key') 
        print('+++where no space in my_message, key needs to be an integer for caesar cipher')
        
        print('+++For example: ')
        print('+++python caesar_cipher.py my_secrete_message 3')

        exit()
